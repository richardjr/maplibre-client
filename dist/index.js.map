{"mappings":"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","sources":["src/index.ts"],"sourcesContent":["import {Map, MapGeoJSONFeature, MapLibreEvent, MapMouseEvent, NavigationControl, Source} from 'maplibre-gl';\r\n// @ts-ignore\r\nimport MapboxDraw from '@mapbox/mapbox-gl-draw';\r\n// @ts-ignore\r\nimport * as turf from '@turf/turf';\r\n\r\n\r\n// Define the structure of your JSON objects as GeoJSON\r\n\r\n// Feature\r\ninterface Feature {\r\n    type: string;\r\n    geometry: {\r\n        type: string;\r\n        coordinates: number[];\r\n    };\r\n    properties?: {\r\n        [key: string]: any;\r\n    };\r\n}\r\n\r\n// GeoJSON\r\n\r\ntype GeoJSON = {\r\n    type: string;\r\n    features: Feature[];\r\n};\r\n\r\n// Map of GeoJSON objects we use to keep layers in sync with the map\r\ninterface GeoJSONMap {\r\n    [key: string]: GeoJSON; // Define the structure of your JSON objects as GeoJSON\r\n}\r\n\r\n// Icons\r\ninterface Icon {\r\n    name: string;\r\n    url: string;\r\n}\r\n\r\n// Queue Operation\r\ninterface QueueOperation {\r\n    type: \"add_layer\" | \"remove_layer\" | \"add_geojson\" | \"clear_layer\" | \"set_visibility\" | \"add_event\" | \"resize\" | \"line_draw\" | \"set_center\" | \"delete_feature\" | \"move_feature\";\r\n    event_type?: string;\r\n    layer_name?: string; // This makes layer_name optional\r\n    data?: GeoJSON;\r\n    url?: string;\r\n    values?: any;\r\n    hook?: Function;\r\n    toggle?: boolean;\r\n    layer_filter?: string[];\r\n}\r\n\r\n// Client Options used to initialize the map\r\ninterface ClientOptions {\r\n    minZoom?: number;\r\n    maxZoom?: number;\r\n    zoom?: number;\r\n    padding?: number;\r\n    center?: [number, number];\r\n    style?: string;\r\n    controls?: boolean;\r\n    debug?: boolean;\r\n    icons?: Icon[];\r\n    json_url?: string;\r\n    fit?: boolean;\r\n}\r\n\r\n// Event Options used to add events to the map\r\ninterface eventOptions {\r\n    hook?: Function;\r\n    event_type?: string;\r\n    layer_name?: string;\r\n    clear?: boolean;\r\n    add_point?: boolean;\r\n    hook_actual?: Function;\r\n    layer_filter?: string[];\r\n}\r\n\r\nconst defaultLayers = [\"data\"];\r\n\r\n// Maplibre Client\r\nexport class MaplibreClient {\r\n    map: Map | undefined;\r\n    queue: QueueOperation[] = [];\r\n    loaded: boolean = false;\r\n    debug: boolean = false;\r\n    canvas: HTMLElement | undefined;\r\n\r\n    options: ClientOptions | undefined;\r\n\r\n    geojson: GeoJSONMap = {};\r\n    events: eventOptions[] = [];\r\n\r\n    // Draw line mode\r\n    draw_point_mode= \"add\";\r\n    draw_actual_points: any[] =[];\r\n\r\n    moving_point: any=null;\r\n    drawProperties: any={};\r\n\r\n\r\n    constructor(options: ClientOptions) {\r\n        this.options = options;\r\n        this.map = new Map({\r\n            container: 'map',\r\n            style: this.options.style || '/mapfiles/?file=cartodb-xyz.json',\r\n            center: this.options.center || [-0.9307443, 50.7980974],\r\n            zoom: this.options.zoom || 10,\r\n            minZoom: this.options.minZoom || 15,\r\n            maxZoom: this.options.maxZoom || 1\r\n        });\r\n\r\n        // Setup default layers geojson\r\n        for(let layer in defaultLayers) {\r\n            this.geojson[defaultLayers[layer]] = {\"type\":\"FeatureCollection\",\"features\":[]};\r\n        }\r\n\r\n        if (this.options.controls === true) {\r\n            this.map.addControl(new NavigationControl());\r\n        }\r\n\r\n        this.canvas = this.map.getCanvasContainer();\r\n\r\n        if (options.debug && options.debug === true) {\r\n            console.log('*********************** MAP DEBUG ***********************')\r\n            console.log('Maplibre Client: ', options);\r\n            this.map.showCollisionBoxes = true;\r\n            this.map.showTileBoundaries = true;\r\n            this.map.on('click', () => {\r\n                // Print the current map center and zoom\r\n                console.log('Center:', this.map.getCenter());\r\n                console.log('Zoom:', this.map.getZoom());\r\n            });\r\n        }\r\n\r\n        let self = this;\r\n\r\n        this.map.on('load', function () {\r\n            self.loaded = true;\r\n            self.loadIcons(self.options.icons);\r\n            self.enableLocation();\r\n            self.processQueue();\r\n            self.reload_data();\r\n        });\r\n\r\n        const draw = new MapboxDraw();\r\n        this.map.addControl(\r\n            draw,\r\n        );\r\n\r\n    }\r\n\r\n    loadIcons(icons: Icon[]) {\r\n        let self = this;\r\n        icons.forEach((icon) => {\r\n            // Make a random uuid to use as the image name\r\n            const uuid = Math.random().toString(36).substring(2, 15) + Math.random().toString(36).substring(2, 15);\r\n            self.map.loadImage(icon.url+\"?cacheblock=\"+uuid).then(response => {\r\n\r\n                // Add the image to the map\r\n                self.map.addImage(icon.name, response.data);\r\n            });\r\n        });\r\n    }\r\n\r\n    enableLocation() {\r\n    }\r\n\r\n    reload_data() {\r\n        if (this.options.json_url !== undefined) {\r\n            fetch(this.options.json_url)\r\n                .then(response => response.json())\r\n                .then(data => {\r\n                    this.addGeojson(data, 'data', this.options.fit);\r\n                })\r\n                .catch(error => console.error(error));\r\n        }\r\n    }\r\n\r\n    addGeojson(data: GeoJSON, layer_name: string = 'data', fit: boolean = false, values?:{}) {\r\n        this.addQueueOperation({type: 'add_geojson', data: data, layer_name: layer_name, toggle: fit, values:values});\r\n    }\r\n\r\n    addQueueOperation(operation: QueueOperation) {\r\n        this.queue.push(operation);\r\n        this.processQueue();\r\n    }\r\n\r\n    /**\r\n     * Add ids to the geojson data\r\n     *\r\n     * We need unique ids for each feature\r\n     * @param data\r\n     */\r\n    _addIdsToGeojson(data: GeoJSON) {\r\n        for (let i in data.features) {\r\n            if (data.features[i].properties&&!data.features[i].properties.id) {\r\n                data.features[i].properties.id = Math.random().toString(36).substring(2, 15) + Math.random().toString(36).substring(2, 15);\r\n            }\r\n        }\r\n        return data;\r\n    }\r\n\r\n    /**\r\n     * Process the queue of operations\r\n     *\r\n     */\r\n    processQueue(): void {\r\n        let source: Source;\r\n        let self=this;\r\n        if (this.loaded === true && this.queue.length > 0) {\r\n            let operation = this.queue.shift();\r\n            self._debugLog(`Processing Queue ${operation.type}`);\r\n            switch (operation.type) {\r\n                case 'line_draw':\r\n                    this._LineDrawMode(operation);\r\n                    break;\r\n                case 'set_center':\r\n                    this.map.setCenter(operation.values);\r\n                    break;\r\n                case 'delete_feature':\r\n                    source=this.map.getSource(operation.layer_name);\r\n                    if(this.geojson[operation.layer_name]) {\r\n                        let data = this.geojson[operation.layer_name]\r\n                        let features = data.features;\r\n                        for (let i in features) {\r\n                            if (features[i].properties && features[i].properties.id && features[i].properties.id === operation.values.id) {\r\n                                features.splice(Number(i), 1);\r\n                                break;\r\n                            }\r\n                        }\r\n                        //@ts-ignore\r\n                        source.setData(data);\r\n                    }\r\n                    break;\r\n                case 'move_feature':\r\n                    source=this.map.getSource(operation.layer_name);\r\n                    if(this.geojson[operation.layer_name]) {\r\n                        let data = this.geojson[operation.layer_name]\r\n                        let features = data.features;\r\n                        for (let i in features) {\r\n                            if (features[i].properties && features[i].properties.id && features[i].properties.id === operation.values.id) {\r\n                                features[i].geometry.coordinates = operation.values.lonLat;\r\n                                break;\r\n                            }\r\n                        }\r\n                        //@ts-ignore\r\n                        source.setData(data);\r\n                    }\r\n                    break;\r\n                case 'add_geojson':\r\n                    source=this.map.getSource(operation.layer_name);\r\n                    // Add ids to the geojson\r\n                    operation.data = this._addIdsToGeojson(operation.data);\r\n                    if(operation.values&&operation.values['merge']===true&&this.geojson[operation.layer_name]) {\r\n                        // Merge the data\r\n                        let new_data = operation.data;\r\n                        let old_data = this.geojson[operation.layer_name]\r\n                        for(let i in new_data.features) {\r\n                            old_data.features.push(new_data.features[i]);\r\n                        }\r\n                        // copy the old data\r\n                        let copyData=JSON.parse(JSON.stringify(old_data));\r\n                        //@ts-ignore\r\n                        source.setData(old_data);\r\n                        this.geojson[operation.layer_name] = copyData;\r\n                    } else {\r\n                        let copyData=JSON.parse(JSON.stringify(operation.data));\r\n                        //@ts-ignore\r\n                        source.setData(operation.data);\r\n                        this.geojson[operation.layer_name] = copyData;\r\n                    }\r\n                    if (this.geojson[operation.layer_name].features.length > 0) {\r\n                        if(operation.toggle === true) {\r\n                            const bbox = turf.bbox(this.geojson[operation.layer_name]);\r\n                            this.map.fitBounds(bbox, {padding: this.options.padding, maxZoom: this.options.maxZoom});\r\n                        }\r\n                    }\r\n                    break;\r\n                case 'clear_layer':\r\n                    //@ts-ignore\r\n                    this.map.clearLayer(operation.layer_name);\r\n                    break;\r\n                case 'add_event':\r\n                    const callback = (event: MapMouseEvent) => {\r\n                        // See if there is a feature(s) here:\r\n                        let features: MapGeoJSONFeature[] = [];\r\n                        let actual_features=[];\r\n\r\n                        if (operation.layer_filter) {\r\n                            // Filters do not seem to work correctly for line strings because reasons\r\n                            features = self.map.queryRenderedFeatures(event.point, {layers: operation.layer_filter});\r\n                            // we need to get the actual feature from the geojson not these ones as they are in a crazy state\r\n                            /*for(let i in features) {\r\n                                let feature = self.getFeature(operation.layer_name,features[i].properties.id);\r\n                                if(feature) {\r\n                                    actual_features.push(feature);\r\n                                }\r\n                            }*/\r\n                        }\r\n                        // @ts-ignore\r\n                        operation.hook([event.lngLat.lng, event.lngLat.lat], event, features);\r\n                    }\r\n\r\n                    if (operation.toggle === true) {\r\n                        self.clearAllEvents();\r\n                    }\r\n\r\n                    // Make an event object\r\n                    let event: eventOptions = {hook: operation.hook, layer_name: operation.layer_name, clear: operation.toggle, event_type: operation.event_type, layer_filter: operation.layer_filter};\r\n                    event.hook_actual = callback;\r\n                    if(event.layer_name) {\r\n                        this.map.on(event.event_type, event.layer_name, callback);\r\n                    } else {\r\n                        this.map.on(event.event_type, callback);\r\n                    }\r\n                    this.events.push(event);\r\n                    break;\r\n                case 'resize':\r\n                    this.map.resize();\r\n                    break;\r\n                default:\r\n                    console.log('Unknown Operation', operation);\r\n                    break;\r\n            }\r\n            this.processQueue()\r\n        }\r\n    }\r\n\r\n    // private methods\r\n\r\n    _fuzzyMatch(point1: number,point2: number,precision?: number) {\r\n        precision=precision||0.0001;\r\n        //console.log(`points: ${point1}:${point2} diff: ${point1-point2} - precision: ${precision}`);\r\n        if(point1===point2&&point1===point2)\r\n            return true;\r\n        if(point1-precision<=point2&&point1+precision>=point2&&point1-precision<=point2&&point1+precision>=point2)\r\n            return true;\r\n        return false;\r\n    }\r\n\r\n\r\n    _findMidpoint(pointA: number[], pointB: number[]): number[]    {\r\n        return [(pointA[0] + pointB[0]) / 2, (pointA[1] + pointB[1]) / 2];\r\n    }\r\n\r\n    _drawLine() {\r\n        let line = {\r\n            type: \"Feature\",\r\n            geometry: {\r\n                type: \"LineString\",\r\n                coordinates: this.draw_actual_points\r\n            }\r\n        };\r\n        // Draw the line on the map\r\n        this.geojson[\"draw-end-points\"]={\"type\":\"FeatureCollection\",\"features\":[]};\r\n        this.geojson[\"draw-mid-points\"]={\"type\":\"FeatureCollection\",\"features\":[]};\r\n\r\n        // Make the actual points geojson\r\n        for(let i in this.draw_actual_points) {\r\n            this.geojson[\"draw-end-points\"].features.push({\r\n                \"type\": \"Feature\",\r\n                \"geometry\": {\"coordinates\": this.draw_actual_points[i], \"type\": \"Point\"},\r\n                \"properties\": {\"actual_index\": i }\r\n            });\r\n        }\r\n\r\n        // Make the mid points geojson\r\n        for(let i=0;i<this.draw_actual_points.length-1;i++) {\r\n            let mid_point=this._findMidpoint(this.draw_actual_points[i],this.draw_actual_points[i+1]);\r\n            this.geojson[\"draw-mid-points\"].features.push({\r\n                \"type\": \"Feature\",\r\n                \"geometry\": {\"coordinates\": [mid_point[0],mid_point[1]], \"type\": \"Point\"},\r\n                \"properties\": { \"actual_index\": i }\r\n            });\r\n        }\r\n        //@ts-ignore\r\n        this.map.getSource(\"draw-mid-points\").setData(this.geojson[\"draw-mid-points\"]);\r\n        //@ts-ignore\r\n        this.map.getSource(\"draw-end-points\").setData(this.geojson[\"draw-end-points\"]);\r\n        //@ts-ignore\r\n        this.map.getSource(\"draw-vertex\").setData(line);\r\n\r\n    }\r\n\r\n    _debugLog(message: string) {\r\n        if(this.options.debug===true) {\r\n            console.log(message);\r\n        }\r\n    }\r\n\r\n    _LineDrawMode(operation?: QueueOperation) {\r\n\r\n\r\n        let self = this;\r\n        this.moving_point=null;\r\n        this.drawProperties={};\r\n        this.map.getSource(\"draw-end-points\").setData({\"type\":\"FeatureCollection\",\"features\":[]});\r\n        this.geojson[\"draw-end-points\"] = {\"type\":\"FeatureCollection\",\"features\":[]};\r\n\r\n        this.clearAllEvents();\r\n\r\n        function onMove(point: [], e: MapMouseEvent) {\r\n            const coords = e.lngLat;\r\n            self.draw_actual_points[self.moving_point]=[coords.lng, coords.lat];\r\n            self._drawLine();\r\n            self.canvas.style.cursor = 'grabbing';\r\n        }\r\n\r\n        function onUp(e: MapMouseEvent) {\r\n            self.canvas.style.cursor = '';\r\n            self.clearEventType('mousemove');\r\n            self.clearEventType('mouseup');\r\n            //self.map.off('mousemove', onMove);\r\n            //self.map.off('touchmove', onMove);\r\n        }\r\n\r\n        this.addEvent({event_type: 'mousedown', layer_name: 'draw-end-points', hook: (point: [],e: any)=> {\r\n                e.preventDefault();\r\n                if(e.originalEvent.which===1) {\r\n                    // left click\r\n                    self.moving_point = e.features[0].properties.actual_index;\r\n                    self.canvas.style.cursor = 'grab';\r\n                    self.addEvent({event_type: 'mousemove', hook: onMove, clear: false});\r\n                    self.addEvent({event_type: 'mouseup', hook: onUp, clear: false});\r\n                    //self.map.on('mousemove', onMove);\r\n                    //self.map.once('mouseup', onUp);\r\n                }\r\n                if(e.originalEvent.which===3) {\r\n                    // right click\r\n                    self.draw_actual_points.splice(e.features[0].properties.actual_index,1);\r\n                    self._drawLine();\r\n                }\r\n            }, clear: false})\r\n\r\n\r\n        this.addEvent({event_type: 'mousedown', layer_name: 'draw-mid-points', hook: (point: [],e: any)=>{\r\n                e.preventDefault();\r\n                if(e.originalEvent.which===1) {\r\n                    // add a new point at the midpoint in the array\r\n                    self.draw_actual_points.splice(e.features[0].properties.actual_index + 1, 0, [e.lngLat.lng, e.lngLat.lat]);\r\n                    self._drawLine();\r\n                    self.moving_point = e.features[0].properties.actual_index + 1;\r\n                    self.canvas.style.cursor = 'grab';\r\n                    //self.map.on('mousemove', onMove);\r\n                    self.addEvent({event_type: 'mousemove', hook: onMove, clear: false});\r\n                    self.addEvent({event_type: 'mouseup', hook: onUp, clear: false});\r\n\r\n                    //self.map.once('mouseup', onUp);\r\n                }\r\n            }, clear: false});\r\n\r\n\r\n        // json contains a line string we need to convert to points in draw_actual_points\r\n        if(operation.data&&operation.data.features&&operation.data.features.length>0&&operation.data.features[0].geometry&&operation.data.features[0].geometry.coordinates&&operation.data.features[0].geometry.coordinates.length>0) {\r\n            this.draw_actual_points=operation.data.features[0].geometry.coordinates;\r\n            // Create a line between all the points\r\n            let line = {\r\n                type: \"Feature\",\r\n                geometry: {\r\n                    type: \"LineString\",\r\n                    coordinates: this.draw_actual_points\r\n                }\r\n            };\r\n            // Draw the line on the map\r\n            self.map.getSource(\"draw-vertex\").setData(line);\r\n            self._drawLine();\r\n            this.drawProperties= operation.data.features[0].properties;\r\n        }\r\n\r\n\r\n        function addPoint(point: any[],e: Event) {\r\n            const features = self.map.queryRenderedFeatures(e.point, {layers: ['draw-end-points']});\r\n\r\n            if(self.draw_point_mode===\"add\") {\r\n                if (features.length > 0) {\r\n                    // This is a move then handled else where\r\n                } else {\r\n                    self.draw_actual_points.push(point);\r\n                    // Create a line between all the points\r\n                    self._drawLine();\r\n                }\r\n            } else {\r\n                // Delete mode\r\n                // Find any points within 10 pixels of the click\r\n                if (features.length > 0) {\r\n                    // Delete the point\r\n                    // find the point in draw_actual_points using the coordinates\r\n                    for(let i in self.draw_actual_points) {\r\n                        // fuzzy match of coordinates by 0.0001\r\n\r\n                        if(self._fuzzyMatch(self.draw_actual_points[i][0],features[0].geometry.coordinates[0])&&self._fuzzyMatch(self.draw_actual_points[i][1],features[0].geometry.coordinates[1])) {\r\n                            self.draw_actual_points.splice(i,1);\r\n                            break;\r\n                        }\r\n                    }\r\n                    self._drawLine();\r\n                }\r\n            }\r\n        }\r\n\r\n        self.clickEvent({hook:addPoint,clear:false});\r\n    }\r\n\r\n    // Public Methods\r\n\r\n\r\n    /**\r\n     * Undo the last point drawn\r\n     * @constructor\r\n     */\r\n    LineDrawUndo() {\r\n        if(this.draw_actual_points.length>0)\r\n            this.draw_actual_points.pop();\r\n        this._drawLine();\r\n    }\r\n\r\n\r\n    /**\r\n     * Line Draw Mode enable\r\n     * @param layer_name - the layer name to draw on\r\n     * @param toggle - enable or disable\r\n     * @constructor\r\n     */\r\n    LineDrawMode(layer_name: string, toggle: boolean = true, features?: GeoJSON) {\r\n        this.addQueueOperation({type: 'line_draw', layer_name: layer_name, toggle: toggle, data: features});\r\n    }\r\n\r\n    /**\r\n     * Set the visibility of a layer\r\n     * @param layer_name\r\n     * @param visibility\r\n     */\r\n    setLayerVisibility(layer_name: string, visibility: string) {\r\n        this.addQueueOperation({type: 'set_visibility', layer_name: layer_name, values: {visibility: visibility}});\r\n    }\r\n\r\n    /**\r\n     * Set the center of the map\r\n     * @param center\r\n     */\r\n    setCenter(center: [number, number]) {\r\n        this.addQueueOperation({type: 'set_center', values: center});\r\n    }\r\n\r\n    /**\r\n     * Delete a feature from a layer using the feature id\r\n     * @param layer_name\r\n     * @param feature_id\r\n     */\r\n    deleteFeature(layer_name: string, feature_id: string) {\r\n        this.addQueueOperation({type: 'delete_feature', layer_name: layer_name, values: {id: feature_id}});\r\n    }\r\n\r\n    moveFeaturePoint(layer_name: string, feature_id: string, lonLat: any[]) {\r\n        this.addQueueOperation({type: 'move_feature', layer_name: layer_name, values: {id: feature_id, lonLat: lonLat}});\r\n    }\r\n\r\n    /**\r\n     * Get a layer as a geojson object\r\n     * @param layer_name\r\n     * @return {GeoJSON}\r\n     */\r\n    getGeojsonLayer(layer_name: string) {\r\n        return this.geojson[layer_name];\r\n    }\r\n\r\n    getFeature(layer_name: string, feature_id: string) {\r\n        let features = this.geojson[layer_name].features;\r\n        for (let i in features) {\r\n            if (features[i].properties && features[i].properties.id && features[i].properties.id === feature_id) {\r\n                return features[i];\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Merge two geojson objects\r\n     * @param data1\r\n     * @param data2\r\n     * @return {GeoJSON}\r\n     */\r\n    mergeGeojson(data1: GeoJSON, data2: GeoJSON): GeoJSON {\r\n        let features = data1.features.concat(data2.features);\r\n        return {\r\n            type: \"FeatureCollection\",\r\n            features: features\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Get the center of the map\r\n     * @return {number[]}\r\n     */\r\n    getCenter() : number[] {\r\n        // get center of the map\r\n        const center = this.map.getCenter();\r\n        // return the center as an array\r\n        return [center.lng, center.lat];\r\n    }\r\n\r\n\r\n    /**\r\n     * Get the drawn line string TODO this needs to support multiple lines\r\n     */\r\n    getDrawnLineString(): GeoJSON {\r\n        let data: GeoJSON= {\"type\":\"FeatureCollection\",\"features\":[{\r\n                type: \"Feature\",\r\n                geometry: {\r\n                    type: \"LineString\",\r\n                    coordinates: this.draw_actual_points\r\n                }\r\n            }]};\r\n        return data;\r\n    }\r\n\r\n    /**\r\n     * Finalise the line draw and add it to the map\r\n     * @param layer\r\n     * @param properties\r\n     */\r\n    finaliseLineDraw(layer: string = 'data', properties: {} = {},mode: string = 'save'): void {\r\n        this.clearAllEvents();\r\n        // merge the saved properties with properties sent\r\n        properties = Object.assign(this.drawProperties, properties);\r\n        if(mode===\"save\") {\r\n            let geojson: GeoJSON = this.getDrawnLineString();\r\n            geojson.features[0].properties = properties;\r\n            // Check we have more than 2 points\r\n            if (geojson.features[0].geometry.coordinates.length < 2) {\r\n                return;\r\n            }\r\n            geojson = this._addIdsToGeojson(geojson);\r\n            this.addGeojson(geojson, layer, false, {merge: true});\r\n        }\r\n        this.draw_actual_points=[];\r\n        this.map.getSource(\"draw-vertex\").setData({\"type\":\"FeatureCollection\",\"features\":[]});\r\n        this.map.getSource(\"draw-mid-points\").setData({\"type\":\"FeatureCollection\",\"features\":[]});\r\n        this.map.getSource(\"draw-end-points\").setData({\"type\":\"FeatureCollection\",\"features\":[]});\r\n        this.geojson[\"draw-end-points\"] = {\"type\":\"FeatureCollection\",\"features\":[]};\r\n        this.geojson[\"draw-mid-points\"] = {\"type\":\"FeatureCollection\",\"features\":[]};\r\n        this.geojson[\"draw-vertex\"] = {\"type\":\"FeatureCollection\",\"features\":[]};\r\n    }\r\n\r\n    /**\r\n     * Clear all events from the map\r\n     * @return {void}\r\n     */\r\n    clearAllEvents(): void {\r\n        for (let i in this.events) {\r\n            // @ts-ignore IS this working???\r\n            if(this.events[i].layer_name)\r\n                this.map.off(this.events[i].event_type, this.events[i].layer_name, this.events[i].hook_actual);\r\n            else\r\n                this.map.off(this.events[i].event_type, this.events[i].hook_actual);\r\n        }\r\n        this.events = [];\r\n    }\r\n\r\n    /**\r\n     * Clear all events of a certain type\r\n     * @param eventType\r\n     */\r\n    clearEventType(eventType: string) {\r\n\r\n        for (let i in this.events) {\r\n            if (this.events[i].event_type === eventType) {\r\n                if(this.events[i].layer_name)\r\n                    this.map.off(eventType, this.events[i].layer_name, this.events[i].hook_actual);\r\n                else\r\n                    this.map.off(eventType, this.events[i].hook_actual);\r\n                this.events.splice(Number(i), 1);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Add a click event to the map\r\n     * @param eventOption\r\n     */\r\n    clickEvent(eventOption: eventOptions): void {\r\n        this.addQueueOperation({\r\n            type: 'add_event',\r\n            event_type: 'click',\r\n            layer_name: eventOption.layer_name,\r\n            hook: eventOption.hook,\r\n            toggle: eventOption.clear,\r\n            layer_filter: eventOption.layer_filter\r\n        });\r\n    }\r\n\r\n    dragFeature(layer_name: string = 'data', feature_id: string) {\r\n        let self = this;\r\n        self.clearAllEvents();\r\n        function onDragMove(point: [], e: MapMouseEvent) {\r\n            const coords = e.lngLat;\r\n            self.moveFeaturePoint(layer_name, feature_id, [coords.lng, coords.lat]);\r\n        }\r\n\r\n        function onDragEnd(e: MapMouseEvent) {\r\n            self.clearEventType('mousemove');\r\n            self.clearEventType('mouseup');\r\n        }\r\n\r\n        this.addEvent({event_type: 'mousemove', hook: onDragMove, clear: false});\r\n        this.addEvent({event_type: 'mouseup', hook: onDragEnd, clear: false});\r\n    }\r\n\r\n    /**\r\n     * Add all other events to the map\r\n     * @param eventOption\r\n     */\r\n    addEvent(eventOption: eventOptions): void {\r\n        this.addQueueOperation({\r\n            type: 'add_event',\r\n            event_type: eventOption.event_type,\r\n            layer_name: eventOption.layer_name,\r\n            hook: eventOption.hook,\r\n            toggle: eventOption.clear,\r\n            layer_filter: eventOption.layer_filter\r\n        });\r\n    }\r\n\r\n    /**\r\n     * resize the map\r\n     * @return {void}\r\n     */\r\n    resize(): void {\r\n        this.addQueueOperation({type: 'resize'});\r\n    }\r\n\r\n    /**\r\n     * Set the style of the map\r\n     * @param style\r\n     */\r\n    setStyle(style: string) {\r\n        this.map.setStyle(style);\r\n        // Reload all the geojson data\r\n        for(let layer in this.geojson) {\r\n            //@ts-ignore\r\n            this.map.getSource(layer).setData(this.geojson[layer]);\r\n        }\r\n    }\r\n}\r\n"],"names":[],"version":3,"file":"index.js.map"}